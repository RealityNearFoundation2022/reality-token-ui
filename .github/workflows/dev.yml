name: compile frontend

on:
  push:
    branches:
      - dev

jobs:
  create-deployment-artifacts:
    name: Create deployment artifact
    runs-on: ubuntu-latest
    environment: QA_ENV_REACT_APP
    steps:
      - uses: actions/checkout@v2
      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
          PORT: ${{ secrets.QA_PORT }}
          REACT_APP_MAPBOX_KEY: ${{ secrets.QA_MAPBOX_KEY }}
          REACT_APP_API: ${{ secrets.QA_API }}
        run: |
          npm i --legacy-peer-deps
          npm run build
          tar -czf "${GITHUB_SHA}".tar.gz --exclude=*.git --exclude=node_modules dist

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v2
        with:
          name: Build-FrontEnd
          path: ${{ github.sha }}.tar.gz
  prepare-release-on-servers:
    name: Prepare release
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    steps:
      - uses: actions/download-artifact@v2
        with:
          name:  Build-FrontEnd
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.QA_HOST_FRONTEND }}
          username: ${{ secrets.QA_HOST_FE_USERNAME }}
          password: ${{ secrets.QA_HOST_FE_PASSWORD }}
          source: ${{ github.sha }}.tar.gz
          target: artifacts
      - name: connect server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.QA_HOST_FRONTEND }}
          username: ${{ secrets.QA_HOST_FE_USERNAME }}
          password: ${{ secrets.QA_HOST_FE_PASSWORD }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "releases/${GITHUB_SHA}"
            tar xzf artifacts/${GITHUB_SHA}.tar.gz -C "releases/${GITHUB_SHA}"
            rm -r /var/www/html/* 2> /dev/null
            cp -r releases/${GITHUB_SHA}/dist/* /var/www/html/
